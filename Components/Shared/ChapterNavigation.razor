@using PRN_MANGA_PROJECT.Models.ViewModels
@using PRN_MANGA_PROJECT.Services
@inject ChapterUIService ChapterService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="chapter-navigation-component">
    <div class="nav-container">
        <div class="nav-section">
            <h6 class="nav-title">Chapter Navigation</h6>
            <div class="chapter-list">
                @if (Chapters.Any())
                {
                    @foreach (var chapter in Chapters.Take(10))
                    {
                        <div class="chapter-item @(chapter.Id == CurrentChapterId ? "active" : "")" 
                             @onclick="() => NavigateToChapter(chapter.Id)">
                            <div class="chapter-info">
                                <span class="chapter-title">@chapter.Title</span>
                                @if (!string.IsNullOrEmpty(chapter.ChapterNumber))
                                {
                                    <span class="chapter-number">Ch. @chapter.ChapterNumber</span>
                                }
                            </div>
                            <div class="chapter-meta">
                                <span class="page-count">@(chapter.PageCount ?? chapter.ImageCount) pages</span>
                                <span class="date">@chapter.CreatedAt.ToString("MMM dd")</span>
                            </div>
                        </div>
                    }
                    
                    @if (Chapters.Count() > 10)
                    {
                        <div class="show-more">
                            <button class="btn btn-link btn-sm" @onclick="ShowAllChapters">
                                Show All Chapters (@Chapters.Count())
                            </button>
                        </div>
                    }
                }
                else
                {
                    <div class="no-chapters">
                        <i class="fas fa-book-open"></i>
                        <p>No chapters available</p>
                    </div>
                }
            </div>
        </div>
        
        <div class="nav-actions">
            <div class="quick-nav">
                <button class="btn btn-outline-primary btn-sm" 
                        @onclick="PreviousChapter" 
                        disabled="@(PreviousChapterId == null)">
                    <i class="fas fa-chevron-left"></i>
                    Previous
                </button>
                <button class="btn btn-outline-primary btn-sm" 
                        @onclick="NextChapter" 
                        disabled="@(NextChapterId == null)">
                    Next
                    <i class="fas fa-chevron-right"></i>
                </button>
            </div>
            
            <div class="chapter-controls">
                <button class="btn btn-link btn-sm" @onclick="ToggleFavorites">
                    <i class="fas fa-bookmark @(IsBookmarked ? "text-warning" : "")"></i>
                </button>
                <button class="btn btn-link btn-sm" @onclick="ShareChapter">
                    <i class="fas fa-share-alt"></i>
                </button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public int MangaId { get; set; }
    
    [Parameter]
    public int CurrentChapterId { get; set; }
    
    [Parameter]
    public bool IsBookmarked { get; set; }
    
    [Parameter]
    public EventCallback<int> OnChapterChanged { get; set; }

    private IEnumerable<ChapterViewModel> Chapters = new List<ChapterViewModel>();
    private int? PreviousChapterId;
    private int? NextChapterId;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadChapters();
        await LoadNavigationChapters();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (MangaId != 0)
        {
            await LoadChapters();
            await LoadNavigationChapters();
        }
    }

    private async Task LoadChapters()
    {
        try
        {
            var chapters = await ChapterService.GetChaptersByMangaIdAsync(MangaId);
            Chapters = chapters.OrderBy(c => c.ChapterNumber);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading chapters: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadNavigationChapters()
    {
        if (CurrentChapterId == 0) return;

        try
        {
            var currentChapter = Chapters.FirstOrDefault(c => c.Id == CurrentChapterId);
            if (currentChapter != null)
            {
                var nextChapter = await ChapterService.GetNextChapterAsync(CurrentChapterId, MangaId);
                var previousChapter = await ChapterService.GetPreviousChapterAsync(CurrentChapterId, MangaId);

                NextChapterId = nextChapter?.Id;
                PreviousChapterId = previousChapter?.Id;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading navigation chapters: {ex.Message}");
        }
    }

    private async Task NavigateToChapter(int chapterId)
    {
        await OnChapterChanged.InvokeAsync(chapterId);
        Navigation.NavigateTo($"/chapter/{chapterId}");
    }

    private async Task PreviousChapter()
    {
        if (PreviousChapterId.HasValue)
        {
            await NavigateToChapter(PreviousChapterId.Value);
        }
    }

    private async Task NextChapter()
    {
        if (NextChapterId.HasValue)
        {
            await NavigateToChapter(NextChapterId.Value);
        }
    }

    private void ShowAllChapters()
    {
        Navigation.NavigateTo($"/manga/{MangaId}/chapters");
    }

    private async Task ToggleFavorites()
    {
        // Implement bookmark functionality
        Console.WriteLine("Toggle favorites");
        StateHasChanged();
    }

    private async Task ShareChapter()
    {
        // Implement share functionality
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Navigation.Uri);
            Console.WriteLine("URL copied to clipboard");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sharing chapter: {ex.Message}");
        }
    }
}
