@page "/manga/{MangaId:int}"
@using PRN_MANGA_PROJECT.Models.ViewModels
@using PRN_MANGA_PROJECT.Services
@inject IChapterService ChapterService
@inject IMangaService MangaService
@inject NavigationManager Navigation

<PageTitle>@MangaTitle - Manga Details</PageTitle>

<div class="manga-detail-container">
    <div class="container-fluid">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading manga...</span>
                </div>
                <p class="mt-2">Loading manga details...</p>
            </div>
        }
        else
        {
            <!-- Manga Header -->
            <div class="manga-header">
                <nav aria-label="breadcrumb" class="mb-3">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/">Trang Chủ</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@MangaTitle</li>
                    </ol>
                </nav>
                
                <div class="row">
                    <div class="col-md-3">
                        <div class="manga-cover">
                            <img src="@CoverImageUrl" alt="@MangaTitle" class="cover-image" />
                        </div>
                    </div>
                    <div class="col-md-9">
                        <div class="manga-info">
                            <h1 class="manga-title">@MangaTitle</h1>
                            <p class="manga-author">Tác Giả: @Author</p>
                            <p class="manga-translator">Nhóm Dịch: Manga Theo Yêu Cầu</p>
                            <p class="manga-status">Trạng Thái: @Status</p>
                            <p class="manga-views">Lượt Xem: 457,994,786</p>
                            <p class="manga-follows">Theo Dõi: 2,445</p>
                            <div class="manga-rating">
                                <span class="rating-text">Bình Chọn: 3.7/5 - 217 Lượt</span>
                                <div class="stars">
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star"></i>
                                    <i class="fas fa-star-half-alt"></i>
                                    <i class="far fa-star"></i>
                                </div>
                            </div>
                            <div class="manga-genres">
                                @if (Manga?.Tags != null && Manga.Tags.Any())
                                {
                                    @foreach (var tag in Manga.Tags)
                                    {
                                        <span class="genre-tag" style="background-color: @(tag.Color ?? "#f8f9fa");">@tag.Name</span>
                                    }
                                }
                                else
                                {
                                    <span class="genre-tag">Action</span>
                                    <span class="genre-tag">Adventure</span>
                                    <span class="genre-tag">Comedy</span>
                                    <span class="genre-tag">Drama</span>
                                    <span class="genre-tag">Fantasy</span>
                                    <span class="genre-tag">Shounen</span>
                                    <span class="genre-tag">Supernatural</span>
                                }
                            </div>
                            <div class="manga-actions">
                                <button class="btn btn-success btn-lg" @onclick="StartReading">
                                    <i class="fas fa-book"></i>
                                    Đọc Từ Đầu
                                </button>
                                <button class="btn btn-primary btn-lg">
                                    <i class="fas fa-star"></i>
                                    Theo Dõi
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="manga-description mt-4">
                    <h5>@MangaTitle:</h5>
                    <p>@Description</p>
                    <button class="btn btn-warning btn-sm">
                        Xem Thêm
                    </button>
                </div>
            </div>


            <!-- Chapter List -->
            <div class="quick-chapters mt-3">
                <div class="section-header">
                    <h3>Danh Sách Chương</h3>
                    <div class="chapter-sort-controls">
                        <span class="sort-label">Số Chương</span>
                        <button class="btn btn-outline-secondary sort-toggle-btn" @onclick="ToggleSortOrder" title="@(sortDescending ? "Click để xem cũ nhất" : "Click để xem mới nhất")">
                            <i class="fas @(sortDescending ? "fa-sort-amount-down" : "fa-sort-amount-up")"></i>
                            <span class="sort-text">@(sortDescending ? "Mới nhất" : "Cũ nhất")</span>
                        </button>
                    </div>
                </div>
                
                @if (RecentChapters.Any())
                {
                    <div class="chapter-list">
                        @foreach (var chapter in RecentChapters)
                        {
                            <div class="chapter-item" @onclick="() => NavigateToChapter(chapter.Id)">
                                <div class="chapter-number">
                                    Chương @(string.IsNullOrEmpty(chapter.ChapterNumber) ? chapter.Id.ToString() : chapter.ChapterNumber)
                                </div>
                                <div class="chapter-date">
                                    @chapter.CreatedAt.ToString("dd/MM/yyyy")
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="no-chapters">
                        <i class="fas fa-book-open fa-3x text-muted mb-3"></i>
                        <h4>Chưa Có Chương</h4>
                        <p class="text-muted">Manga này chưa có chương nào.</p>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int MangaId { get; set; }

    private MangaViewModel? Manga;
    private string MangaTitle = "Loading...";
    private string Author = "";
    private string Status = "";
    private string Genre = "";
    private string Description = "";
    private string CoverImageUrl = "/images/placeholder-manga.jpg";
    private int TotalChapters = 0;
    private List<ChapterViewModel> RecentChapters = new List<ChapterViewModel>();
    private bool isLoading = true;
    private bool sortDescending = true; // Default to descending (newest first)

    protected override async Task OnInitializedAsync()
    {
        await LoadMangaDetails();
        await LoadRecentChapters();
    }

    private async Task LoadMangaDetails()
    {
        try
        {
            Manga = await MangaService.GetMangaByIdAsync(MangaId);
            if (Manga != null)
            {
                MangaTitle = Manga.Title;
                Author = Manga.Author;
                Status = Manga.Status;
                Description = Manga.Description;
                CoverImageUrl = Manga.CoverImageUrl ?? "/images/placeholder-manga.jpg";
            }
            else
            {
                // Fallback to mock data if manga not found
                MangaTitle = $"Sample Manga #{MangaId}";
                Author = "Sample Author";
                Status = "Ongoing";
                Description = "This is a sample manga description. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
                CoverImageUrl = "/images/placeholder-manga.jpg";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading manga details: {ex.Message}");
            // Fallback to mock data on error
            MangaTitle = $"Sample Manga #{MangaId}";
            Author = "Sample Author";
            Status = "Ongoing";
            Description = "This is a sample manga description. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.";
            CoverImageUrl = "/images/placeholder-manga.jpg";
        }
    }

    private async Task LoadRecentChapters()
    {
        try
        {
            var chapters = await ChapterService.GetChaptersByMangaIdAsync(MangaId);
            // Remove duplicates and sort
            RecentChapters = chapters
                .GroupBy(c => c.ChapterNumber)
                .Select(g => g.First())
                .OrderByDescending(c => c.ChapterNumber)
                .ToList();
            TotalChapters = RecentChapters.Count;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading recent chapters: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void StartReading()
    {
        if (RecentChapters.Any())
        {
            var firstChapter = RecentChapters.OrderBy(c => c.ChapterNumber).First();
            NavigateToChapter(firstChapter.Id);
        }
        else
        {
            Navigation.NavigateTo($"/manga/{MangaId}/chapters");
        }
    }

    private void NavigateToChapter(int chapterId)
    {
        Navigation.NavigateTo($"/chapter/{chapterId}");
    }

    private async Task ToggleSortOrder()
    {
        sortDescending = !sortDescending;
        Console.WriteLine($"ToggleSortOrder: sortDescending = {sortDescending}");
        
        // Re-sort the existing chapters
        RecentChapters = sortDescending 
            ? RecentChapters.OrderByDescending(c => c.ChapterNumber).ToList()
            : RecentChapters.OrderBy(c => c.ChapterNumber).ToList();
            
        Console.WriteLine($"Chapters after sort: {string.Join(", ", RecentChapters.Select(c => c.ChapterNumber))}");
        StateHasChanged();
    }

}
